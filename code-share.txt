5-_HTML_Basics --> what is html 
6-_CSS_Basics --> what is css how to apply
---------------------------------------------
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Basic of HTML and CSS</title>
    <style>
      img {
        width: 100px;
        border: 1px solid red;
        border-radius: 50px;
        float: left;
        margin-right: 10px;
      }
    </style>
  </head>
  <body>
    <img
      src="https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png"
      alt="google logo"
    />
    <p>Sarang Jain</p>
    <p>I love the teaching</p>
  </body>
</html>


2-_The_Head_Section
======================
meta tah is give more information about this webpage , for using meta tag we can give more information about web page.

keywords ---> for seo purpose when someone searches
description --> it shows the description 
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
  </head>
  <body></body>
</html>

3-_Text and heading text
========================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
  </head>
  <body>
    <h1>HTMl</h1>
    <p>This is section about HTML tutoriul.</p>
    <h2>CSS</h2>
    <p>This is section about CSS tutoriul.</p>
    <h3>Heading 3</h3>
    <h4>Heading 4</h4>
    <h5>Heading 5</h5>
    <h6>Heading 6</h6>

    <p>
      This is some text in a <em>paragraph</em>.
      <i>one</i>
      <strong>Two</strong> <b>Three</b>
    </p>
  </body>
</html>

4-_Entities :- some reservered keyword &code;
==============
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
  </head>
  <body>
    <p>This is some text in a &lt;paragraph&gt;. &copy;</p>
  </body>
</html>

5-_Hyperlinks
===============
index.html
---------
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <style></style>
  </head>
  <body>
    <a href="https://www.google.com/">Google</a> <br />
    <a href="/pages/about.html">go to about page</a><br />
    <a href="mailto:sarang.jain67@gmail.com">email to me</a><br />
    <a href="./images/google.png">Google image</a><br />
    <a href="./images/google.png" download> image download</a><br />
  </body>
</html>


pages\about.html
---------------
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>About page</title>
  </head>
  <body>
    <h1>About Page</h1>
    <a href="../index.html">go to index page</a>
  </body>
</html>


6-_Images
=========
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <style>
      img {
        width: 100px;
        height: 100px;
        object-fit: cover;
      }
    </style>
  </head>
  <body>
    <img src="/images/google.png" alt="this is google image" />
  </body>
</html>


7-_Video_and_Audio
========================
Download vidio from https://www.pexels.com/

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <style>
      video {
        width: 200px;
      }
    </style>
  </head>
  <body>
    <video src="/vidio/nowar.mp4" controls loop autoplay>
      Your browser does not support Vidio Please upgrade it
    </video>
  </body>
</html>

8-_Lists
==========
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <style>
      video {
        width: 200px;
      }
    </style>
  </head>
  <body>
    <ul>
      <li>Milk</li>
      <li>
        Cheese
        <ul>
          <li>Blue cheese</li>
          <li>Feta</li>
        </ul>
      </li>
    </ul>

    <p>Recipie:</p>
    <ol>
      <li>Mix flour, baking powder, sugar, and salt.</li>
      <li>In another bowl, mix eggs, milk, and oil.</li>
      <li>Stir both mixtures together.</li>
      <li>Fill muffin tray 3/4 full.</li>
      <li>Bake for 20 minutes.</li>
    </ol>

    <p>Cryptids of Cornwall:</p>

    <dl>
      <dt>HtML</dt>
      <dd>for structure</dd>

      <dt>CSS</dt>
      <dd>For styling</dd>

      <dt>JAvascript</dt>
      <dd>For functinality</dd>
    </dl>
  </body>
</html>


9-_Tables
==========
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <style>
      table,
      td,
      th {
        border: 1px solid gray;
        border-collapse: collapse;
      }
    </style>
  </head>
  <body>
    <table>
      <thead>
        <tr>
          <th>Items</th>
          <th>Expenditure</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Donuts</td>
          <td>3,000</td>
        </tr>
        <tr>
          <td>Stationery</td>
          <td>18,000</td>
        </tr>
      </tbody>
      <tfoot>
        <tr>
          <th>Totals</th>
          <th>21,000</th>
        </tr>
      </tfoot>
    </table>
  </body>
</html>

10-_Containers or inline element
===============
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <style>
      div {
        background: gold;
      }
      .highlight {
        background: yellow;
      }
    </style>
  </head>
  <body>
    <div>
      Lorem ipsum dolor sit amet, consectetur adipisicing elit. Temporibus
      suscipit cum, odit eos similique quos fugit rem eum eaque magnam quasi
      veniam, inventore ipsum. Suscipit quidem unde illum et sit.
    </div>
    <a href="#">Google.com</a>

    <div>
      Lorem ipsum dolor sit amet, consectetur adipisicing elit. Temporibus
      suscipit cum, odit eos similique quos fugit rem eum eaque magnam quasi
      veniam, inventore ipsum. Suscipit quidem unde illum et sit.
    </div>
    <a href="#">Google.com</a>

    <div>
      <span class="highlight">Lorem</span>
      ipsum dolor sit amet, consectetur adipisicing elit. Temporibus suscipit
      cum, odit eos similique quos fugit rem eum eaque magnam quasi veniam,
      inventore ipsum. Suscipit quidem unde illum et sit.
    </div>
    <a href="#">Google.com</a>
  </body>
</html>


11-_Semantic_Elements
====================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <style>
      div {
        background: gold;
      }
      .highlight {
        background: yellow;
      }
    </style>
  </head>
  <body>
    <article>
      <h1>Heading</h1>
      <p>Published <time>March 24 2022</time></p>
      <p>
        <mark>Lorem</mark> ipsum dolor sit amet consectetur adipisicing elit.
        Esse totam veritatis nobis distinctio? Eveniet sint error sequi quae quo
        porro, excepturi nemo pariatur fuga adipisci, dolore quas, similique
        ratione numquam!
      </p>
      <figure>
        <img src="" alt="" />
        <figurecaption>This is the google logo icon</figurecaption>
      </figure>
    </article>
  </body>
</html>


12-_Structuring_a_Web_Page
==========================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
  </head>
  <body>
    <header>
      <nav>
        <ul>
          <li>Lorem ipsum</li>
          <li>Lorem ipsum</li>
          <li>Lorem ipsum</li>
        </ul>
      </nav>
    </header>
    <main>
      <article>
        main Area
        <section>
          Product one
          <article>
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Molestiae,
            accusamus pariatur quos nisi quas, at labore nostrum laboriosam
            dolorum praesentium, corrupti eaque earum! Nostrum nam, quam
            excepturi minus est voluptatibus?
          </article>
        </section>
        <section>
          Product two
          <article>
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Molestiae,
            accusamus pariatur quos nisi quas, at labore nostrum laboriosam
            dolorum praesentium, corrupti eaque earum! Nostrum nam, quam
            excepturi minus est voluptatibus?
          </article>
        </section>
      </article>
    </main>
    <aside></aside>
    <footer>
      <nav>
        <ul>
          <li>Lorem ipsum</li>
          <li>Lorem ipsum</li>
          <li>Lorem ipsum</li>
        </ul>
      </nav>
    </footer>
  </body>
</html>


**********************4.CSS Basics******************
1-_Introduction
===============
css rule and what we will learn in this css basic

2-_Providing_CSS
==============
there is 3 ways tto provide style in document.

index.html
============
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <link rel="stylesheet" href="./style.css" />
    <style>
      p {
        color: black;
      }

      #first {
        color: green;
        font-weight: bold;
      }
    </style>
  </head>
  <body>
    <p id="first">Lorem ipsum dolor sit amet.</p>
    <p style="color: green; font-weight: bold">Lorem ipsum dolor sit amet.</p>
    <p>Lorem ipsum dolor sit amet.</p>
  </body>
</html>

style.css
--------
p {
  color: red;
}


3-_Normalizing_CSS
==================
we have multiple browser and they render some of html element diffrently . so if we make our website witht normlize.css our website will be looking not same all the place so we use norm.css for the same.

download from there https://necolas.github.io/normalize.css/ and use it.

4-_Basic_Selectors
==================
we can select element using 4 basis selector
1) type
2) id
3) class
4) attribute

style.css
==========
body {
  margin: 10px;
}

#products {
}

.product {
}

a[target="_blank"] {
  color: green;
}

a[href*="google"][href^="https"][href$="com"] {
  color: blue;
}


index.html
=========
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <link rel="stylesheet" href="./normalize.css" />
    <link rel="stylesheet" href="./style.css" />
  </head>
  <body>
    <section id="products">
      <article class="product"></article>
      <article class="product"></article>
      <article class="product"></article>
      <article class="product"></article>
    </section>

    <div>
      <a href="https://www.google.com" target="_blank">Google</a>
    </div>
  </body>
</html>



5-_Relational_Selectors
===========================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <link rel="stylesheet" href="./normalize.css" />
    <link rel="stylesheet" href="./style.css" />
  </head>
  <body>
    <section id="products">
      <p>Lorem ipsum dolor sit amet.</p>

      <article id="products">
        <p>Lorem ipsum dolor sit amet.</p>
      </article>
    </section>
    <p>Lorem ipsum dolor sit amet.</p>
    <p>Lorem ipsum dolor sit amet.</p>
  </body>
</html>

 
style.css
==========
body {
  margin: 10px;
}

#products p {
  color: orange;
}

#products + p {
  color: orange;
}

#products ~ p {
  color: orange;
}


6-_Pseudo-class_Selectors
===========================
pseudo classes are not real classes what we define , pseudo classes are bunch of classes which is applied by browser by default .


<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <link rel="stylesheet" href="./normalize.css" />
    <link rel="stylesheet" href="./style.css" />
  </head>
  <body>
    <article>
      <h1>Heading</h1>
      <p class="first">Lorem ipsum dolor sit amet.</p>
      <p>Lorem ipsum dolor sit amet.</p>
      <a href="http://anylink.com">anyLink</a>
    </article>

    <section>
      <li>Item 1</li>
      <li>Item 2</li>
      <li>Item 3</li>
      <li>Item 4</li>
    </section>
  </body>
</html>

style.css
=========
body {
  margin: 10px;
}

/* article .first {
  color: deeppink;
  font-style: italic;
} */

article :first-child {
  color: deeppink;
  font-style: italic;
}

/* article :first-of-type {
  color: deeppink;
  font-style: italic;
} */

article :last-child {
  color: deepskyblue;
  font-style: italic;
}

article :last-of-type {
  color: deepskyblue;
  font-style: italic;
}

li:nth-child(odd) {
  color: deepskyblue;
}

li:nth-child(even) {
  color: gold;
}

li:nth-child(3n) {
  color: blue;
}

a:link {
  color: aqua;
}

a:visited {
  color: red;
}

a:hover,
a:focus {
  color: greenyellow;
}


7-_Pseudo-element_Selectors
==========================

Pseudo-element :- To style part of element  for ex: first letter
Pseudo-classes :- To style element in a perticular state ex: a:visited

index.html
============

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <link rel="stylesheet" href="./normalize.css" />
    <link rel="stylesheet" href="./style.css" />
  </head>
  <body>
    <section>
      <header>Heading</header>
      <p>
        Lorem ipsum, dolor sit amet consectetur adipisicing elit. Ad adipisci
        fugit deserunt voluptas. Molestiae tempore debitis voluptate quibusdam
        pariatur veritatis atque nihil, accusantium nobis quidem dolores harum
        culpa, incidunt eum. Nisi accusamus facilis commodi omnis quam itaque
        vel consequatur perspiciatis,
      </p>
    </section>
  </body>
</html>


style.css
=========
body {
  margin: 10px;
}

p::first-letter {
  font-size: 140%;
  font-weight: bold;
}

p::first-line {
  color: deepskyblue;
}

p::before {
  content: "...";
  display: block;
}

p::after {
  content: "***";
}


8-_Selectors_Specificty
=======================
css apis applied to element using specifity
rule goes to 1) id selector 2) class & attribute selector 3) element selector

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <link rel="stylesheet" href="./styles/normalize.css" />
    <link rel="stylesheet" href="./styles/style.css" />
  </head>
  <body>
    <article id="test">
      <h1 class="highlights" id="products">Heading</h1>
    </article>
  </body>
</html>


style.css
----------
h1 {
  color: red;
  /*   color: red !important;  */
}

.highlights {
  color: green;
}

#products {
  color: yellow;
}

article #products {
  color: green;
}

#test #products {
  color: gray;
}



9-_Inheritance
=================
in css some propety by default inherit values from the parent. some css property not all the property always remember these are font color related property.

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <link rel="stylesheet" href="./styles/normalize.css" />
    <link rel="stylesheet" href="./styles/style.css" />
  </head>
  <body>
    <p>Lorem ipsum <strong>dolor</strong> sit amet.</p>
  </body>
</html>


p {
  color: red;
  border: 1px solid green;
}

strong {
  color: initial;  // make the initial clolor menas by default color dont inherit from parent
  border: inherit;  // do border style inherit from the parent
}
 

10-_Colors
===========
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <link rel="stylesheet" href="./styles/normalize.css" />
    <link rel="stylesheet" href="./styles/style.css" />
  </head>
  <body>
    <div class="box"></div>
  </body>
</html>

style.css
==========
.box {
  height: 200px;
  width: 200px;
  background-color: #fbfb1380;
}


10-_Colors
===========
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <link rel="stylesheet" href="./styles/normalize.css" />
    <link rel="stylesheet" href="./styles/style.css" />
  </head>
  <body>
    <div class="box"></div>
  </body>
</html>

style.css
==========
.box {
  height: 200px;
  width: 200px;
  background-color: #fbfb1380;
}


11-_Gradients
=============
online gradient genrator --> https://cssgradient.io/
we can create beautiful transition between 2 or more color

The linear-gradient() CSS function creates an image consisting of a progressive transition between two or more colors along a straight line. Its result is an object of the <gradient> data type, which is a special kind of <image>.

The radial-gradient() CSS function creates an image consisting of a progressive transition between two or more colors that radiate from an origin. Its shape may be a circle or an ellipse. The function's result is an object of the <gradient> data type, which is a special kind of <image>.


<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <link rel="stylesheet" href="./styles/normalize.css" />
    <link rel="stylesheet" href="./styles/style.css" />
  </head>
  <body>
    <div class="box"></div>
  </body>
</html>

style.css
--------
.box {
  height: 200px;
  width: 200px;
  background: linear-gradient(red, yellow);
  background: linear-gradient(to left, red, yellow);
  background: linear-gradient(45deg, red, yellow);
  background: radial-gradient(red, yellow);
}


background: linear-gradient( red, yellow);
background: linear-gradient(to left, red, yellow);
background: linear-gradient(to right, red, yellow); // target side
background: linear-gradient(to bottom right, red, yellow); //targets corner
background: linear-gradient(to bottom right, red, yellow); //targets degree
background: linear-gradient(to bottom right, red 30%); //targets degree and how much area red will take we mentioned


background: radial-gradient(red, yellow);
background: radial-gradient(circle ,red, yellow); // when we want to make clear circle
background: radial-gradient(circle at top left ,red, yellow); // circle with position




12-_Borders
===========
search for css shapes in google for see how we can create shapes in css.

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <link rel="stylesheet" href="./styles/normalize.css" />
    <link rel="stylesheet" href="./styles/style.css" />
  </head>
  <body>
    <div class="box"></div>
  </body>
</html>


style.css
=========
.box {
  height: 200px;
  width: 200px;
  background: yellow;
  border: 10px solid deepskyblue;
  border-style: dotted;
  border-radius: 100%;
}


13-_Shadows
===========
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <link rel="stylesheet" href="./styles/normalize.css" />
    <link rel="stylesheet" href="./styles/style.css" />
  </head>
  <body>
    <div class="box">
      <h1>Heading</h1>
    </div>
  </body>
</html>


style.css
==========
.box {
  height: 200px;
  width: 200px;
  background: gold;
  box-shadow: 10px 10px;
  box-shadow: -10px -10px;
  box-shadow: 10px 10px 30px red;
  box-shadow: 0px 0px 30px gray;
}

h1 {
  color: white;
  text-shadow: 10px 10px 10px rgb(128, 128, 128, 0.4);
}


/*

**************Summary of web fundamnetal**************


• HTML (Hypertext Markup Language) is a markup language used to define the structure
and contents of web pages.
• CSS (Cascading Stylesheets) are used for styling web pages.
• JavaScript is a programming language used for making web pages interactive.
• To view a web page, we enter its URL (Uniform Resource Locator) into the browser’s
address bar.
• To view the HTML behind a web page, we right-click on the page and select View
Source or View Page Source.
• HTTP (Hypertext Transfer Protocol) is a set of rules that clients and servers use to
communicate and exchange data.

When you visit a website, your browser (client) sends an HTTP request to the server and
receives an HTTP response. The response includes an HTML document that represents the
page you’re visiting. The browser reads the HTML document to construct a Document
Object Model (an in-memory representation of the elements on the page). Once the DOM
is ready, the browser renders (displays) the target page.

• We can use the Network tab of Chrome DevTools to inspect HTTP requests and
responses exchanged between the browser and the server.

• An HTML document consists of a DOCTYPE declaration that specifies the version of
HTML being used followed by a tree (hierarchy) of elements that define the structure
and content of the document.

• The root element in an HTML document is the html element which always includes a
head and a body element. The head element contains information about the page such
as its title. The body element includes the structure and content of the page.

• Most HTML elements include an opening and closing tag.

• We can use attributes to provide additional information about an element (like the
source of an image). Attributes are coded as part of the opening tag.

• To style an element using CSS, we write a CSS rule which consists of a selector and one
or more declarations.

• The selector is used to target one or more elements. We can select elements by their
type, class, ID and so on.
• A declaration consists of a property, a colon, a value and is terminated by a semicolon.
• Prettier is the most popular VSCode extension for formatting code.
• Using validation services we can ensure that our HTML/CSS code is valid and follows
the official rules. This helps us get better rankings in search engines.


**************Summary of Basic HTML**************

• The <head> section is used to provide information about a webpage.
• The <p> element is used to represent a paragraph. A paragraph can be one or many lines of text.
• The <em> element is used to define emphasized text. By default, emphasized text is displayed in italic.
• The <strong> element is used to represent important content. Browsers, by default, render strong content in bold.

The <i> and <b> elements are considered deprecated because HTML should not be
used for styling. That’s the role of CSS.
• Headings are represented using <h1>, <h2>, <h3>, <h4>, <h5>, <h6>. Every
web page should have one and only one <h1> element. Headings should have a natural
hierarchy and should not be skipped.
• Entities are used to display special characters such as angle brackets, copyright symbol,
etc. The most important entities are: &nbsp; (non-breaking space), &lt; (less than
sign), &gt; (greater than sign) and &copy; (copyright symbol).
• The <a> (anchor) element, with its href attribute, is used to create a hyperlink to web
pages, locations in the same page, files and email addresses.
• A relative URL specifies the target resource relative to the current resource. An absolute
URL specifies the location of a resource irrespective of the current resource. It can start
with a / to indicate the root of the website or a protocol (eg http://) to represent a
resource on a different website.
• The <img> element is used to display an image. It’s a common best practice to set the
alt (alternative text) attribute. This helps visually impaired people understand the page
content. Also, if the image cannot be loaded, the alternative text is displayed.
• The <video> and <audio> elements are used to display video and audio. These
elements have boolean attributes such as controls, autoplay and loop.
• The <ul> element is used to represent a list where the order of items doesn’t matter. The
<ol> element is used to represent an ordered list of items. The <dl> (description list)
element is used to implement a glossary or to display metadata.
• The <table> element should only be used to represent tabular data. A table can have
zero or more <tr> (table row) elements. Each <tr> element can have zero or more cells.
Cells can be data cells (<td>) or header cells (<th>).
The <div> and <span> elements are generic containers used for styling purposes. Divs
are block-level elements, spans are inline elements. A block-level element starts on a new
line and takes up the entire available horizontal space.
• Semantic elements help us write markup that is more meaningful and descriptive to
search engines, screen readers and other software. So, use <div> and <span> elements
when no other semantic element is appropriate.
• The semantic elements in HTML5 are: <header>, <footer>, <nav>, <main>,
<aside>, <article>, <section>, <figure>, <time> and <mark>.


**************Summary of Basic CSS**************
• CSS styles can be embedded in an HTML document, written in a separate file (as an
external stylesheet) or written inline in an HTML element using the style attribute.
• Inline styles overwrite embedded styles which in turn overwrite external styles.
• External stylesheets provide the best separation of HTML and CSS code and result in
more maintainable code. Plus, an external stylesheet can be used in many HTML
documents.
• We can select elements by their type, class, attribute or ID.
• Relational selectors help us select elements without the need to assign them a specific ID
or class. This, however, can result in fragile styles. If we move elements around, our CSS
rules may break. We can still use them in situations where we are certain about the
location of elements.
• We can take advantage of pseudo-classes to target elements without the need to give
them a specific class. The most common pseudo-classes are: first-child, firstof-
type, last-child, last-of-type and nth-child. Pseudo-classes start with
a single colon.
• With pseudo-elements we can style a part of an element. The most common pseudoelements
are: first-letter, first-line, selection, before and after.
Pseudo-elements start with double colons.
• Selectors specificity determines the weight of a selector. When multiple selectors target
the same element, the browser applies the selector with the higher specificity (weight). If
two selectors have the same specificity, the one that comes last is the winner.
• ID selectors are the most specific selectors because we cannot have multiple elements
with the same ID. Class and attribute selectors are less specific because we can have
many elements with the same class and/or attributes. Element selectors are the least
specific selectors.
• In VSCode, we can see the specificity of a rule by hovering our mouse over it. The
specificity is represented using three numbers (x, y, z) where x represents the number of
ID selectors, y represents the number of class/attribute selectors and z represents the
number of element selectors.
• Some CSS properties inherit their value from their parent element. Typically, properties
that are used for styling text such as text color, font, font size, etc are inherited. We can
stop the inheritance by setting the value of a property to initial. To enforce
inheritance, we should set the value of a property to inherit.
• We can specify colors by their name, hexadecimal value, RGB/RGBA value or HSL/
HSLA value.
• RGBA and HSLA values include an alpha channel used for transparency. The value for
the alpha channel is a decimal point number between 0 (completely transparent) and 1
(completely opaque).
• Using the linear-gradient() and radial-gradient() functions we can create
gradients in CSS. Gradients are images so they cannot be used as the value of
background-color property. We can use them as the value of background-image
or background properties.
• The border property is a shorthand property for border-top, border-right,
border-bottom and border-left. It takes three values: the thickness of the border,
its style and its color.
• We also have specific properties like border-width, border-style and bordercolor.
These properties take four values for the top, right, bottom and left borders.
• Using the box-shadow and text-shadow properties we can apply a shadow to
elements and text. These properties take a few values. The first two values determine the
horizontal and vertical distance of the shadow from the element. The third value (called
blur radius) determines the softness of the border. We can specify the color as the fourth
value.

*/

******************************* Advance-CSS- *******************

*************2.Layout*******************

2-_The_Box_Model
==============

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <link rel="stylesheet" href="./styles/normalize.css" />
    <link rel="stylesheet" href="./styles/style.css" />
  </head>
  <body>
    <p>Lorem ipsum dolor sit amet.</p>
    <p>Lorem ipsum dolor sit amet.</p>
  </body>
</html>


style.css
-----------
p {
  padding: 10px 20px 10px 20px;
  border: 5px solid gold;
}

/*
  p {
  padding: 20px
  margin: 0
}

  p {
  padding:0
  margin: 20px 
}

*/

3-_Sizing_Elements
==================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <link rel="stylesheet" href="./styles/normalize.css" />
    <link rel="stylesheet" href="./styles/style.css" />
  </head>
  <body>
    <div class="box">Hello</div>
    <div class="box">world</div>
  </body>
</html>

style.css
-----------

* {
  box-sizing: border-box;
}

.box {
  width: 100px;
  height: 100px;
  background-color: gold;
}

.box {
  width: 100px;
  height: 100px;
  background-color: gold;
  // padding:20px;
  // border:10px solid orange;
  box-sizing: content-box/border-box
}

** --> width and hesight property only applied on block level element.
.box {
  width: 100px;  
  height: 100px;
  background-color: gold;
  /* display: block;  */
  /* display: inline;  */
  /* display: inline-block;  */
}

4-_Overflowing
==============
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <link rel="stylesheet" href="./styles/normalize.css" />
    <link rel="stylesheet" href="./styles/style.css" />
  </head>
  <body>
    <div class="box">
      Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis cum
      consectetur vero blanditiis eum assumenda quisquam accusamus dolorem,
      nulla minima provident nisi voluptatibus fugit mollitia! Ipsa ut ipsum
      neque quam optio quibusdam, natus porro vitae ullam sunt, repellat iure ad
      quae veritatis dolorum dignissimos? Dolorem exercitationem ducimus
      deleniti corporis sint?
    </div>
  </body>
</html>


style.css
---------
.box {
  border: 3px solid gold;
  width: 150px;
  height: 150px;
  overflow: visible;
  overflow: hidden;
  overflow: scroll;
  overflow: auto;
  overflow: scroll hidden;
}


5-_Measurement_Units
====================== 	
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <link rel="stylesheet" href="./styles/normalize.css" />
    <link rel="stylesheet" href="./styles/style.css" />
  </head>
  <body>
    <div class="box"></div>
  </body>
</html>


style.css
---------
html {
  /* 62.5% of 16px = 10px */
  font-size: 62.5%;
}

body {
  margin: 10px;
  /* width: 300px; */
}

.box {
  border-top: 3px solid red;
  background-color: gold;
  width: 100px;
  /* height: 100px; */
  width: 50%;
  /* height: 100%; */
  /* viewport hesight 100vh means 100% hesight of viewport hesight*/
  height: 100vh;
  width: 50vw;
  /* when we have to adjust layout accrding to font size we use this em and rem unit */

  /*10x font size of the current element */
  width: 10em; /* 10 x 16px = 160px*/
  font-size: 20px;

  /*10x font size of the root element means html (by default is 16px) , here we dont need to remeber hirechi */
  width: 10rem; /* 10 x 16px = 160px*/
}

.box {
  width: 15rem;
  height: 100vh;
  background-color: gold;
  border-top: 3px solid green;
}


6-_Positioning
===============
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <link rel="stylesheet" href="./styles/normalize.css" />
    <link rel="stylesheet" href="./styles/style.css" />
  </head>
  <body>
    <div class="boxes">
      <div class="box box-one"></div>
      <div class="box box-two"></div>
      <div class="box box-three"></div>
    </div>
  </body>
</html>


style.css
----------
body {
  height: 200vh;
}

.boxes {
  border: 4px solid gray;
}

.box {
  width: 10rem;
  height: 10rem;
}

.box-one {
  background: red;
  /* z-index: 2; */
  /* position: relative; */
}

.box-two {
  background: yellow;
  /* relative means , we can move an element relative to its normal postion and it does not impact to other element*/
  position: relative;
  /* left: 4rem;
  bottom: 4rem; */
  /* z-index: 1; */
 
 /*we have absolute position means , we can move to element with respect to any parent element , if we dont use postion relative to its parent then by default out aboslute position will be relative to its viewport*/
  /*important point abolute poistion element leave the natural flow , it will be traeted as a seprate layes for that is why boxes is treating that there is no more box2 after applying absolute  */
  position: absolute;
  /* right: 0;
  bottom: 0; */
  
  /* fixed means element will be positioned with respect to view port*/
  position: fixed;
  /* top: 0;
  left: 50%; */
  
  /* set size using left and right */
  top: 0;
  left: 5rem;
  right: 5rem;
  width: auto;
}

.box-three {
  background: green;
}



7-_Floating_Elements / issue of parent collapsing // clear float fix
=====================================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <link rel="stylesheet" href="./styles/normalize.css" />
    <link rel="stylesheet" href="./styles/style.css" />
  </head>
  <body>
    <article class="tweet clearfix">
      <div class="avatar"></div>
      <p>Lorem ipsum dolor sit amet.</p>
      <!-- <p class="clear">
        Lorem ipsum dolor sit amet consectetur, adipisicing elit. Quo obcaecati
        necessitatibus molestiae praesentium recusandae, laudantium deserunt
        vero maxime iure quae voluptatum delectus illo, amet ducimus. Esse,
        iusto modi placeat velit ipsum doloremque quaerat facilis odit deleniti
        dolore at. Magnam aspernatur quos velit nihil facilis et tenetur dolor
        eaque ea illum.
      </p> -->
      <!-- <div class="clear"></div> -->
    </article>
  </body>
</html>


style.css
----------

.tweet {
  border: 3px solid lightgray;
}
.avatar {
  width: 5rem;
  height: 5rem;
  background-color: gold;
  float: left;
  margin-right: 0.5rem;
}

.clear {
  clear: both;
}

.clearfix::after {
  content: "";
  clear: both;
  display: block;
}


8-_FlexBox
============
align item  (these are container property)
----------
Justify-content --> (along to main axis)
Align-item 		--> (along to cross axis)

align-content --> this property only works when we have multiple lines in our container 
flex-wrap --> to allow item to wrap into a new line if they are too large

Sizing items  ((these are container item property)
-------------
flex-basis (the initial size of flex item , it will decide the width and height of item based on the flex-direction)
flex-grow  (the growth factor)
flex-shrink (the shrink factor)
flex --> this would be the shorthand propert for above 3 property


<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="keywords" content="HTML,CSS" />
    <meta name="description" content="this is web page for learning" />
    <title>Document</title>
    <link rel="stylesheet" href="./styles/normalize.css" />
    <link rel="stylesheet" href="./styles/style.css" />
  </head>
  <body>
    <div class="container">
      <div class="box box-one">A</div>
      <div class="box box-two">B</div>
      <div class="box box-three">C</div>
    </div>
  </body>
</html>

style.css
----------
.container {
  border: 3px solid lightgray;
  display: flex;

  flex-direction: row;
  flex-direction: column;
  flex-direction: column-reverse;
  flex-direction: row-reverse;
  flex-direction: row;

  /* Justify-content --> (along to main axis or x axix) */

  justify-content: flex-start;
  justify-content: flex-end;
  justify-content: center;
  justify-content: space-evenly;
  justify-content: space-between;
  justify-content: space-around;
  justify-content: center;

  /* Align-item 		--> (along to cross axis or Y axix) */
  align-items: flex-start;
  align-items: flex-end;
  height: 90vh;
  align-items: center;

  /* align-content --> this property only works when we have multiple lines in our container  */
  /*flex-wrap --> to allow item to wrap into a new line if they are too large */
  /* flex-wrap: wrap; */
  /* align-content: center; */
}

.box {
  width: 5rem;
  height: 5rem;
  background: gold;
  margin: 1rem;

  flex-basis: auto;
  /* this will overwrite width property, becase we have set flex-direction row so its overwriting the width, if we would have set flex-direction column then it would have overwritten the height*/
  /* flex-basis: 10rem; */
  flex-basis: 5rem;

  /* flex-grwoth will determine the growth of flex item, means here how our flex container items will use the space*/
  /* flex-grow: 1; */

  /* flex-shrink which is the apposite of flex-grow , it tells the browser how the element should shring if there is no enough space*/

  flex-basis: 15rem;
  flex-shrink: 1;
}

.box-one {
  /*overwrite align-item for box one */
  /* align-self: flex-end; */

  /* flex-basis: 5rem; */
  /* flex-grow: 0; */
  /* flex-grow: 2; */

  flex-shrink: 0;
}
